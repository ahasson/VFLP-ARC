################
# RDKit
#
import time
import logging
import rdkit
from rdkit import Chem
import rdkit.Chem.QED
import rdkit.Chem.Scaffolds.MurckoScaffold

from rdkit.Chem.EnumerateStereoisomers import (
    EnumerateStereoisomers,
    StereoEnumerationOptions,
)

from run.obabel import perform_isomer_unique_correction
from run.utils import write_file_single


def run_rdkit_attributes(ctx, tautomer, smi, attributes_to_gen, attributes):

    step_timer_start = time.perf_counter()

    mol = rdkit.Chem.MolFromSmiles(smi)

    for attr in attributes_to_gen:
        if attr in attributes and attributes[attr]["prog"] == "rdkit":
            if attr == "qed_rdkit":
                attributes[attr]["val"] = rdkit.Chem.QED.qed(mol)
            elif attr == "scaffold_rdkit":
                try:
                    attributes[attr]["val"] = rdkit.Chem.MolToSmiles(
                        rdkit.Chem.Scaffolds.MurckoScaffold.GetScaffoldForMol(mol),
                        canonical=True,
                    )
                except Exception as _:
                    logging.error("MurckoScaffold Failed for %s", smi)
                    continue

    tautomer["timers"].append(
        ["rdkit_attributes", time.perf_counter() - step_timer_start]
    )


def run_rdkit_stereoisomer_generation(ctx, ligand, assigned=True):
    """
    Enumerate all stereoisomers of the provided molecule SMILES string.
    Note: Only unspecified stereocenters are expanded.

    Parameters
    ----------
    smi : str
         Valid molecule SMILE string.
    assigned: bool
         if True, isomers will be generated for only the unasigned stereo-locations
                  for a smile (faster)
         if False, all isomer combinations will be generated, regardless of what is
                  specified in the input smile (slower)

    Returns
    -------
    stereo_smiles: list of strs.
         A list of valid smile strings, representing stereoisomers.

    """

    step_timer_start = time.perf_counter()

    # Place smi string into a file that can be read
    local_file = ctx["intermediate_dir"] / "neutralized.smi"
    write_file_single(local_file, ligand["smi_neutralized"])

    m = Chem.MolFromSmiles(ligand["smi_neutralized"])
    if assigned == True:  # Faster
        opts = StereoEnumerationOptions(unique=True)
    else:
        opts = StereoEnumerationOptions(unique=True, onlyUnassigned=False)

    isomers = tuple(EnumerateStereoisomers(m, options=opts))

    ligand["stereoisomer_smiles"] = []
    for smi in sorted(Chem.MolToSmiles(x, isomericSmiles=True) for x in isomers):
        ligand["stereoisomer_smiles"].append(smi)

    if ctx["config"]["rdkit_stereoisomer_generation_unique_correction"] == "true":
        ligand["stereoisomer_smiles"] = perform_isomer_unique_correction(
            ctx, ligand["stereoisomer_smiles"]
        )

    if len(ligand["stereoisomer_smiles"]) >= 1:
        ligand["remarks"]["stereoisomer"] = "The stereoisomers were generated by RDKit."
        ligand["timers"].append(
            ["rdkit_stereoisomer", time.perf_counter() - step_timer_start]
        )
        return
    else:
        raise RuntimeError("No output for stereoisomer state generation")

    raise RuntimeError("Stereoisomer generation failed")
